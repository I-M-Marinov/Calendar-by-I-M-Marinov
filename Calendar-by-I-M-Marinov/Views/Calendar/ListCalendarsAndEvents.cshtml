@using Calendar_by_I_M_Marinov.Common
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model Calendar_by_I_M_Marinov.Models.CalendarEventsViewModel

<h2>Select a Calendar</h2>

<form method="get" asp-action="ListCalendarsAndEvents">
    <div class="form-group">
        <select id="calendarSelect" name="selectedCalendarId" class="form-control">
            <option value="all">All Calendars</option>

            @foreach (var calendar in Model.Calendars)
            {
                var isSelected = calendar.CalendarId == Model.SelectedCalendarId;
                <option value="@calendar.CalendarId" selected="@(isSelected ? "selected" : "")">
                    @calendar.CalendarName
                </option>
            }
        </select>
    </div>
    <br />
    <button type="submit" class="btn btn-primary-load-events">Load Events</button>
    <br />
</form>

@if (!string.IsNullOrEmpty(Model.SelectedCalendarName))
{
	<h2>Events for @Model.SelectedCalendarName</h2>
}

@if (Model.Events != null && Model.Events.Any())
{
    <ul class="list-unstyled">
        <br />
        <h4>The Calendar "@Model.SelectedCalendarName" has @Model.Events.Count events/entries. </h4>
        <br />

        @foreach (var evt in Model.Events)
        {
            // Determine if the event is an all-day event
            bool isAllDayEvent = !string.IsNullOrEmpty(evt.Start?.Date) && evt.Start?.DateTime == null;
            bool isOwnedEvent = Model.SelectedCalendarId == "all"
            ? Model.EventCalendarMap.TryGetValue(evt.Id, out var calendarId) && Model.Calendars.FirstOrDefault(c => c.CalendarId == calendarId)?.AccessRole == "owner"
            : Model.Calendars.FirstOrDefault(c => c.CalendarId == Model.SelectedCalendarId)?.AccessRole == "owner";

            @if (ViewBag.SuccessMessage != null && ViewBag.SuccessEventId != null && ViewBag.SuccessEventId.ToString() == evt.Id)
            {
                <div class="alert alert-success" style="text-align:center">
                    @ViewBag.SuccessMessage
                </div>
            }

			<li class="event-item" data-event-id="@evt.Id" data-calendar-id="@Model.SelectedCalendarId" onclick="handleEventClick(this)">
				<div class="event-info">
					
					@if (evt.RecurringEventId != null) // if it is an annual event add the icon
					{
						<img class="annual-icon" src="/Icons/annual-icon.PNG" alt="annual-icon">
					}

					@if (!string.IsNullOrEmpty(evt.Start?.Date) && !string.IsNullOrEmpty(evt.End?.Date)) // if it is an all day event add the icon
					{
						<img class="allDay-icon" src="/Icons/all-day.png" alt="allDay-icon">
					}

					<strong>@evt.Summary</strong><br/>

					@if (evt.Attendees != null && evt.Attendees.Any())
					{
						<div class="attendees-info" onclick="toggleAttendees(this, event)">
							<img src="/Icons/attendee.png" alt="Attendees Icon" class="attendees-icon">
							<span class="attendees-count">@evt.Attendees.Count()</span>
						</div>
					}

					@if (!string.IsNullOrEmpty(evt.Start?.Date) && evt.Start?.DateTime == null && !string.IsNullOrEmpty(evt.End?.Date) && evt.End?.DateTime == null)
					{
						<!-- All-Day Event -->
						<p>
							<span style="color: royalblue; font-weight:500;">Date: @DateTime.Parse(evt.Start.Date).ToString("ddd dd MMM yyyy")</span>
						</p>
					}
					else if (evt.Start?.DateTimeDateTimeOffset != null && evt.End?.DateTimeDateTimeOffset != null)
					{
						<!-- Timed Event -->
						<span>
							<span style="color: green; font-weight:500;">Start:</span>
							@evt.Start.DateTimeDateTimeOffset.Value.ConvertToLocalTime("Europe/Sofia").ToString("MMMM dd, yyyy h:mm tt")
						</span>
						<br/>
						<span>
							<span style="color: red; font-weight:500;">End:</span>
							@evt.End.DateTimeDateTimeOffset.Value.ConvertToLocalTime("Europe/Sofia").ToString("MMMM dd, yyyy h:mm tt")
						</span>
						<br/>
					}
					else if (!string.IsNullOrEmpty(evt.Start?.Date) && !string.IsNullOrEmpty(evt.End?.Date))
					{
						<!-- Multi-day Event with only Dates (all-day across multiple days) -->
						<span>
							<span style="color: green; font-weight:500;">Start:</span>
							@DateTime.Parse(evt.Start.Date).ToLocalTime().ToString("MMMM dd, yyyy")
						</span>
						<br/>
						<span>
							<span style="color: red; font-weight:500;">End:</span>
							@DateTime.Parse(evt.End?.Date).ToLocalTime().ToString("MMMM dd, yyyy")
						</span>
						<br/>
					}

					@if (!string.IsNullOrEmpty(evt.Location))
					{
						<span id="location">Location: @evt.Location</span>
					}

					<!-- Display Attendees -->
					@if (evt.Attendees != null && evt.Attendees.Any())
					{
						<div class="attendees-container">
							<h6>Attendees:</h6>
							<ul>
								@foreach (var attendee in evt.Attendees)
								{
									<li style="list-style-type: square; border:none;">
										<!-- Determine color based on response status -->
										@{
											string color = "black"; // Default color
											if (attendee.ResponseStatus == "accepted")
											{
												color = "green";
											}
											else if (attendee.ResponseStatus == "declined")
											{
												color = "darkred";
											}
											else if (attendee.ResponseStatus == "tentative")
											{
												color = "orange";
											}
											else if (attendee.ResponseStatus == "needsAction")
											{
												color = "blue";
											}
										}

										<!-- Show display name or email with color -->
										<span style="color:@color; font-weight: 600;">
											@if (attendee.DisplayName == null)
											{
												@attendee.Email
											}
											else
											{
												@attendee.DisplayName
											}

											<!-- Show response status -->
											@if (attendee.ResponseStatus == "accepted")
											{
												@("(Accepted)")
											}
											else if (attendee.ResponseStatus == "declined")
											{
												@("(Declined)")
											}
											else if (attendee.ResponseStatus == "tentative")
											{
												@("(Maybe)")
											}
											else if (attendee.ResponseStatus == "needsAction")
											{
												@("(Pending)")
											}
										</span>
									</li>
								}
							</ul>
						</div>
					}

				</div>
				
	               @if (evt.Description != null)
	            {
		            <img class="unfold-icon" src="/Icons/unfold.png" alt="unfold-icon">
	            }


	            @if (!string.IsNullOrEmpty(evt.Description))
	            {
		            <!-- Collapsible description, initially hidden -->
		            <div class="description-container" style="display: none;">
						<p>@evt.Description</p>
		            </div>
	            }
	            <br />

                @if (isOwnedEvent)
                {
					<div class="event-actions-container" style="display: none;">
		                <a asp-action="CreateEvent" 
		                   asp-route-calendarId="@(Model.SelectedCalendarId == "all" ? Model.EventCalendarMap[evt.Id] : Model.SelectedCalendarId)" 
		                   asp-route-eventId="@evt.Id" 
		                   class="btn btn-warning btn-sm">Edit</a>

		                <form asp-action="ConfirmDelete" method="get">
			                <input type="hidden" name="calendarId" value="@(Model.SelectedCalendarId == "all" ? Model.EventCalendarMap[evt.Id] : Model.SelectedCalendarId)" />
			                <input type="hidden" name="eventId" value="@evt.Id" />
			                <button type="submit" class="btn btn-danger btn-sm">Delete</button>
		                </form>

		                @if (!isAllDayEvent)
		                {
			                <form asp-action="DuplicateEvent" method="post">
				                <input type="hidden" name="eventId" value="@evt.Id" />
				                <input type="hidden" name="calendarId" value="@(Model.SelectedCalendarId == "all" ? (Model.EventCalendarMap.TryGetValue(evt.Id, out var calendarId) ? calendarId : Model.SelectedCalendarId) : Model.SelectedCalendarId)" />
				                <button type="submit" class="btn btn-duplicate-event">Duplicate</button>
			                </form>
		                }
						
		               

					</div>
                }
				


				<label for="calendar-dropdown" class="label-copy-to-dropdown" style="display:none;"> Choose a calendar to copy to:</label>
				<div class="copy-to-container">
					<!-- Copy To Button -->
					<button type="button" class="btn btn-primary copy-to-btn" onclick="showDropdown(this)">Copy To</button>
					
					<!-- Dropdown for selecting calendar -->
					<select class="form-control calendar-dropdown" id="calendar-dropdown" style="display: none;">
						@foreach (var calendar in Model.Calendars.Where(c => c.AccessRole == "owner" || c.AccessRole == "writer"))
						{
							<option value="@calendar.CalendarId">@calendar.CalendarName</option>
						}
					</select>

					<!-- Button to confirm copy action -->
					<div class="copy-to-buttons">
						
						<button type="button" class="btn btn-success copy-event-btn" style="display: none;" onclick="copyEvent(this)">Copy Event</button>
						<button type="button" class="btn btn-outline-danger cancel-event-copy-btn" style="display: none;" onclick="resetDropdown(this)">Cancel</button>
					</div>
					

				</div>
				
				@{
					var successMessage = ViewBag.SuccessMessage as string;
					var errorMessage = ViewBag.ErrorMessage as string;
					var copiedEventSummary = ViewBag.CopiedEventSummary as string;
					var destinationCalendarSummary = ViewBag.DestinationCalendarSummary as string;
				}

				<!-- Display success message -->
				@if (!string.IsNullOrEmpty(successMessage))
				{
					<div class="alert alert-success">
						@successMessage
					</div>
				}

				<!-- Display error message -->
				@if (!string.IsNullOrEmpty(errorMessage))
				{
					<div class="alert alert-danger">
						@errorMessage
					</div>
				}

				<!-- Additional messages -->
				@if (!string.IsNullOrEmpty(copiedEventSummary) && !string.IsNullOrEmpty(destinationCalendarSummary))
				{
					<div class="alert alert-info">
						@copiedEventSummary was successfully copied to @destinationCalendarSummary.
					</div>
				}

				<!-- Your existing HTML for the view -->

			</li>
        }
    </ul>
}
else if (Model.SelectedCalendarId != null)
{
    <p>No events found for the selected calendar.</p>
}

						
<style>

	.event-item {
		flex-direction: column;
		align-items: center;
		flex-wrap: nowrap;
		position: relative;
		cursor: pointer;
		padding: 10px;
		margin-bottom: 20px;
		border: 1px solid #ddd;
		border-radius: 5px;
		text-align: center;
		background-color: #f9f9f9;
		transition: background-color 0.3s ease;
		z-index: 1;
		width: 400px;
	}

	.event-item:hover {
		background-color: #f1f1f1;
	}

	.event-item p{
		padding: 0 15px 0 15px;
	}

	#location{
		overflow:hidden;
	}

	.description-container {
		margin-top: 10px;
		padding: 10px;
		border-top: 1px solid #ccc;
	}

	.attendees-info {
		position: absolute;
		z-index: 10;
		top: 10px;
		right: 10px;
		display: flex;
		align-items: center;
		cursor: pointer;
	}

	.attendees-icon {
		width: 14px;
		height: auto;
		margin-right: 3px;
	}

	.attendees-info:hover {
		background-color: forestgreen;
	}

	.unfold-icon {
		width: 15px;
		padding-top: 0.2em;
		padding-bottom: 0;
	}

	.attendees-container {
		max-height: 0;
		opacity: 0;
		overflow: hidden;
		transition: max-height 0.4s ease, opacity 0.4s ease;
		display: block;
	}

	.attendees-count {
		font-size: 12px;
		color: #333;
		font-weight: bold;
	}

	.attendees-container.visible {
		max-height: auto;
		opacity: 1;
	}

	.attendees-container ul li {
		margin: 0 auto;
	}

	/* Buttons styling */

	.event-actions-container {
		display: none;
		position: absolute;
		right: -100px; /* Move it outside the event-item container */
		top: 50%;
		transform: translateY(-50%); /* Center it vertically */
		transition: transform 0.3s ease, opacity 0.3s ease; /* Smooth transition */
		display: flex;
		flex-grow: 1;
		flex-direction: column; /* Stack buttons vertically */
		gap: 5px; /* Add space between buttons */
	}

	.event-actions-container .btn {
		width: 80px; /* Set a fixed width for buttons */
		max-width: 120px;
	}

	.event-item:hover {
		background-color: #f1f1f1;
	}

	.event-actions-container form {
		margin: 0; /* Ensure form buttons don't have extra margin */
	}

	.copy-to-container{
		display:flex;
		flex-direction: column;
		align-items: center;
	}

	.copy-to-buttons{
		display: flex;
		align-items: center;
	}

	.copy-event-btn{
		margin-top: 1em;
		font-size: 12px;
		width: 10em;
	}

	.copy-to-btn{
		font-size: 12px;
		width: 6.5em;
	}

	.cancel-event-copy-btn{
		margin-top: 1em;
		font-size: 12px;
		width: 5em;
	}

	</style>
	
<script>
	// Function to toggle visibility of buttons
	function toggleButtons(el, show) {
		var buttonsDiv = el.querySelector('.event-actions-container');
		if (buttonsDiv) {
			buttonsDiv.style.display = show ? "flex" : "none";
		}
	}

	// Function to toggle description visibility
	function toggleDescription(el) {
		var descriptionDiv = el.querySelector('.description-container');
		var unfoldIcon = el.querySelector('.unfold-icon');

		if (descriptionDiv) {
			if (descriptionDiv.style.display === "none" || descriptionDiv.style.display === "") {
				descriptionDiv.style.display = "block";
				unfoldIcon.style.display = "none";
			} else {
				descriptionDiv.style.display = "none";
				unfoldIcon.style.display = "block";
			}
		}
	}

	// Function to handle click event on an event item
	function handleEventClick(el) {
		var descriptionDiv = el.querySelector('.description-container');
		var buttonsDiv = el.querySelector('.event-actions-container');

		// Toggle the visibility of description
		if (descriptionDiv) {
			if (descriptionDiv.style.display === "none" || descriptionDiv.style.display === "") {
				descriptionDiv.style.display = "block";
				toggleButtons(el, true); // Show buttons when description is shown
			} else {
				descriptionDiv.style.display = "none";
				toggleButtons(el, false); // Hide buttons when description is hidden
			}
		} else {
			// If no description, just toggle buttons
			toggleButtons(el, buttonsDiv.style.display === "none");
		}
	}

	// Function to toggle attendees visibility
	function toggleAttendees(el, event) {
		event.stopPropagation(); // Prevent the event from bubbling up

		var eventItem = el.closest('.event-item');
		var attendeesContainer = eventItem.querySelector('.attendees-container');

		if (attendeesContainer.classList.contains('visible')) {
			attendeesContainer.style.maxHeight = "0"; // Collapse the container
			attendeesContainer.style.opacity = "0";
			attendeesContainer.classList.remove('visible');
		} else {
			attendeesContainer.style.maxHeight = attendeesContainer.scrollHeight + "px"; // Expand the container
			attendeesContainer.style.opacity = "1";
			attendeesContainer.classList.add('visible');
		}
	}
	// Function to initialize dropdown event listener
	function initializeDropdownEvent(dropdown) {
		dropdown.addEventListener('click', function (event) {
			event.stopPropagation(); // Prevent the event from bubbling up
		});
	}

	// Function to show the dropdown and copy button for a specific event item
	function showDropdown(button) {
		// Find the closest event item
		event.stopPropagation(); // Prevent the event from bubbling up
		var eventItem = button.closest('.event-item');

		// Find the dropdown and copy button within this event item
		var dropdown = eventItem.querySelector('.calendar-dropdown');
		var labelDropDown = eventItem.querySelector('.label-copy-to-dropdown');
		var copyButton = eventItem.querySelector('.copy-event-btn');
		var copyToButton = eventItem.querySelector('.copy-to-btn');
		var cancelEventButton = eventItem.querySelector('.cancel-event-copy-btn');

		if (dropdown && copyButton) {
			dropdown.style.display = 'inline-block';
			copyButton.style.display = 'inline-block';
			copyToButton.style.display = 'none';
			labelDropDown.style.display = 'block';
			cancelEventButton.style.display = 'inline-block';

			initializeDropdownEvent(dropdown);
		}
	}

	function copyEvent(button) {
		event.stopPropagation(); // Prevent the event from bubbling up

		// Find the closest event item
		var eventItem = button.closest('.event-item');

		// Get the event ID and source calendar ID from data attributes
		var eventId = eventItem.getAttribute("data-event-id");
		var sourceCalendarId = eventItem.getAttribute("data-calendar-id");

		// Get the destination calendar ID from the dropdown
		var destinationCalendarId = document.querySelector('.calendar-dropdown').value;

		if (eventId && sourceCalendarId && destinationCalendarId) {
			// Create a form element
			var form = document.createElement('form');
			form.method = 'POST';
			form.action = '@Url.Action("CopyEvent", "Calendar")';

			// Create hidden input fields for each parameter
			var eventIdInput = document.createElement('input');
			eventIdInput.type = 'hidden';
			eventIdInput.name = 'eventId';
			eventIdInput.value = eventId;

			var sourceCalendarIdInput = document.createElement('input');
			sourceCalendarIdInput.type = 'hidden';
			sourceCalendarIdInput.name = 'sourceCalendarId';
			sourceCalendarIdInput.value = sourceCalendarId;

			var destinationCalendarIdInput = document.createElement('input');
			destinationCalendarIdInput.type = 'hidden';
			destinationCalendarIdInput.name = 'destinationCalendarId';
			destinationCalendarIdInput.value = destinationCalendarId;

			// Append the inputs to the form
			form.appendChild(eventIdInput);
			form.appendChild(sourceCalendarIdInput);
			form.appendChild(destinationCalendarIdInput);

			// Append the form to the body and submit it
			document.body.appendChild(form);
			form.submit();
		}
	}


	// Function to reset the dropdown and action buttons
	function resetDropdown(button) {
		event.stopPropagation(); // Prevent the event from bubbling up
		// Find the closest event item
		var eventItem = button.closest('.event-item');

		// Find the dropdown and copy button within this event item
		var dropdown = eventItem.querySelector('.calendar-dropdown');
		var labelDropDown = eventItem.querySelector('.label-copy-to-dropdown');
		var copyButton = eventItem.querySelector('.copy-event-btn');
		var copyToButton = eventItem.querySelector('.copy-to-btn');
		var cancelEventButton = eventItem.querySelector('.cancel-event-copy-btn');


		if (dropdown && copyButton) {
			dropdown.style.display = 'none';
			copyButton.style.display = 'none';
			copyToButton.style.display = 'block';
			labelDropDown.style.display = 'none';
			cancelEventButton.style.display = 'none';


			initializeDropdownEvent(dropdown);
		}
	}

</script>
