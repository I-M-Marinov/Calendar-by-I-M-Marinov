@using Calendar_by_I_M_Marinov.Models.Calendar;
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model EventViewModel
<script src="~/js/site.js"></script>

@{
    var isEdited = Model.EventId != null;  // Determine if it's an edit or create
	var actionUrl = isEdited ? "CreateEvent" : "CreateEvent"; 
    var submitButtonText = isEdited ? "Update Event" : "Create Event"; // Button text changes
    var calendarId = Model.CalendarId; 

    ViewBag.Title = isEdited ? "Update an Event" : "Create an Event" + " - " + "G Easy Calendar";
    ViewBag.Header = isEdited ? "Update an Event" : "Create an Event";

}


<h2>@ViewBag.Header</h2>

<form asp-action="@actionUrl" method="post">
	<input type="hidden" name="calendarId" value="@calendarId" />
	<input type="hidden" asp-for="EventId"/> 

	<div class="create-event-group summary">
		<label asp-for="Summary">Title</label>
		<input asp-for="Summary" class="form-control" value="@Model.Summary"/>
	</div>

	<div class="create-event-group location">
		<label asp-for="Location"></label>
		<input asp-for="Location" class="form-control" value="@Model.Location"/>
	</div>

	<div class="create-event-group description">
		<label asp-for="Description"></label>
		<textarea asp-for="Description" class="form-control" rows="7" cols="30">@Model.Description</textarea>
	</div>

	<div class="create-event-container">
		@{
			var isAllDayEvent = Model.IsAllDayEvent;
		}

		<div class="create-event-group2">
			<!-- Start Date Input -->
			<div class="create-event-group start">
				<label asp-for="Start" id="startDateLabel"></label>
				@if (isAllDayEvent)
				{
					<input asp-for="Start"
					       type="date"
					       class="form-control"
					       id="startDateInput"
					       data-value="@(Model.Start.HasValue ? Model.Start.Value.ToString("yyyy-MM-dd") : "")"
					       value="@(Model.Start.HasValue ? Model.Start.Value.ToString("yyyy-MM-dd") : "")" />
				}
				else
				{
					<input asp-for="Start"
					       type="datetime-local"
					       class="form-control"
					       id="startDateInput"
					       data-value="@(Model.Start.HasValue ? Model.Start.Value.ToString("yyyy-MM-ddTHH:mm") : "")"
					       value="@(Model.Start.HasValue ? Model.Start.Value.ToString("yyyy-MM-ddTHH:mm") : "")"/>
				}
			</div>
			<!-- End Date Input -->
			<div class="create-event-group end">
				<label asp-for="End" id="endDateLabel"></label>
				@if (isAllDayEvent)
				{
					<input asp-for="End"
					       type="date"
					       class="form-control"
					       id="endDateInput"
					       data-value="@(Model.End.HasValue ? Model.End.Value.ToString("yyyy-MM-dd") : "")"
					       value="@(Model.End.HasValue ? Model.End.Value.ToString("yyyy-MM-dd") : "")" />
				}
				else
				{
					<input asp-for="End"
					       type="datetime-local"
					       class="form-control"
					       id="endDateInput"
					       data-value="@(Model.End.HasValue ? Model.End.Value.ToString("yyyy-MM-ddTHH:mm") : "")"
					       value="@(Model.End.HasValue ? Model.End.Value.ToString("yyyy-MM-ddTHH:mm") : "")"/>
				}
			</div>

		</div>

		<div class="create-event-group3">
			<div class="create-event-group visibility">
				<label asp-for="Visibility">Visibility</label>
				<select asp-for="Visibility" asp-items="Model.VisibilityOptions" class="form-control"></select>
			</div>

			<div class="create-event-group eventtype">
				<label asp-for="EventType">Event Type</label>
				<select asp-for="EventType" asp-items="Model.EventTypeOptions" class="form-control" id="eventTypeSelect"></select>
				
				<label asp-for="IsAllDayEvent">All Day?</label>
				<input asp-for="IsAllDayEvent" type="checkbox" id="isAllDayCheckbox"/>
			</div>
			
			<input type="hidden" name="RecurringEventId" value="@Model.RecurringEventId" />
		</div>
	</div>

	<br/>
	<div class="attendees-notification">
		<label>Notify attendees?</label><br/>
		<br/>
		<div class="attendees-notification-options">
			<input type="radio" id="all" name="SendUpdates" value="All" @(Model.SendUpdates == "All" ? "checked" : "")/>
			<label for="all">Yes</label>

			<input type="radio" id="externalOnly" name="SendUpdates" value="ExternalOnly" @(Model.SendUpdates == "ExternalOnly" ? "checked" : "")/>
			<label for="externalOnly">Non-Gmail Only</label>

			<input type="radio" id="none" name="SendUpdates" value="None" checked @(Model.SendUpdates == "None" ? "checked" : "")/>
			<label for="none">No</label>
		</div>
	</div>

	<div id="attendeesContainer" class="create-event-group attendees">
		<label asp-for="Attendants">Attendees:</label>
		
		<!-- Button to add more attendees -->
		<button type="button" id="addAttendee" class="btn btn-add-attendee">Add</button>

		@if (Model.Attendants != null && Model.Attendants.Any())
		{
			@foreach (var attendee in Model.Attendants)
			{
				<div class="attendee-row">
					<input type="email" name="Attendants" class="form-control" value="@attendee"/>
					<button type="button" class="btn btn-remove-attendee">Remove</button>
				</div>
			}
		}
	</div>



	
	<div class="add-update-event-control-buttons">
		<button type="submit" class="btn btn-create-event">@submitButtonText</button>
	
		@if (submitButtonText == "Create Event")
		{
			<a asp-action="ListCalendars" id="back-btn" class="btn btn-primary btn-sm">
				Back to Calendars List
			</a>
		}
		else
		{
			<a asp-action="ListCalendarsAndEvents" asp-route-selectedCalendarId="@calendarId" id="back-btn" class="btn btn-primary btn-sm">
				Back
			</a>
		}

	</div>

</form>

<style>
	.btn-add-attendee {
	background-color: #28a745;
	color: white;
	border: none;
	padding: 5px 10px;
	cursor: pointer;
	margin-top: 10px; /* Ensure there's space above the button */
	}

	.btn-remove-attendee {
	background-color: #dc3545;
	color: white;
	border: none;
	padding: 5px 10px;
	cursor: pointer;
	margin-left: 10px;
	}

	.attendee-row {
	margin-bottom: 10px;
	display: flex;
	align-items: center;
    width: 70%;
	}

	/* Align input and remove button */
	.attendee-row input {
	flex: 1;/* Take up remaining space */
	}

	.attendee-row button {
    margin-bottom: 15px;
	margin-left: 10px; /* Space between input and button */
	}

    #addAttendee{
        margin: 0 auto;
        display: block;
		margin-bottom: 1em;
    }

	.attendees-notification{
		display: flex;
		flex-direction: row;
		justify-content: center;
		align-items: baseline;
	}

	#all,
	#externalOnly,
	#none{
		margin: 0.35em;
	}

	#back-btn{
		border-radius: .2rem;
		border: 0.99px solid #000000;
		width: 15%;
		font-weight: 600;
		margin-top: 0.5em;
	}

	.add-update-event-control-buttons{
		display: flex;
		flex-direction: column; 
		align-items:center;
	}




</style>
