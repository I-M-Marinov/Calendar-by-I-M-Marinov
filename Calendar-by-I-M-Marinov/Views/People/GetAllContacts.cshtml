@model List<IGrouping<char, Calendar_by_I_M_Marinov.Models.People.ContactViewModel>>

@{
    ViewData["Title"] = "Contacts List";


}

<h2>Contacts List</h2>
<h4>Total contacts: @ViewBag.ContactsCount</h4>

@if (Model.Count == 0)
{
    <p>No contacts available.</p>
}
else
{
    <div>
        <div class="alphabet-index-containers">
            <!-- Latin Alphabetical Index as Cards -->
            <div class="alphabet-index-container">
                @foreach (var group in Model.Where(g => char.IsLetter(g.Key) && (g.Key < 'А' || g.Key > 'я')))
                {
                    <a href="#letter-@group.Key">
                        <div class="alphabet-card">
                            <span>@group.Key</span>
                        </div>
                    </a>
                }
            </div>

            <!-- Cyrillic Alphabetical Index as Cards -->
            <div class="alphabet-index-container">
                @foreach (var group in Model.Where(g => char.IsLetter(g.Key) && (g.Key >= 'А' && g.Key <= 'я')))
                {
                    <a href="#letter-@group.Key">
                        <div class="alphabet-card">
                            <span>@group.Key</span>
                        </div>
                    </a>
                }
            </div>
        </div>


        @if (ViewBag.ContactGroups != null)
        {
	        <div class="contact-groups-container">
		        <h4>Contact Groups</h4>
                <form method="get" action="@Url.Action("GetContactsFromAGroup", "People")">
			        <div class="contact-groups">
				        @foreach (var contactGroup in ViewBag.ContactGroups)
				        {

                            if (contactGroup.Name != "chatBuddies" && contactGroup.Name != "all" && contactGroup.Name != "blocked")
					        {
						        <button type="submit" name="selectedGroup" value="@contactGroup.Name" class="btn btn-info group-button " id="group-button">
                                    @contactGroup.FormattedName
						        </button>
					        }
				        }
			        </div>
		        </form>
	        </div>
        }
        else
        {
	        <p>No contact groups available.</p>
        }


        <!-- Grouped Contacts by First Letter -->
        @foreach (var group in Model)
        {
	        var sortedGroup = group.OrderBy(contact => contact.FirstName).ToList();

            <h3 class="letter-group-header" id="letter-@group.Key">@group.Key</h3>
            <table class="table table-striped">
                <thead>
                <tr>

	                @if (group.Any(contact => !string.IsNullOrEmpty(contact.FirstName) || !string.IsNullOrEmpty(contact.LastName)))
	                {
		                <th>Full Name</th>
	                }

	                @if (group.Any(contact => contact.Email != "N/A"))
	                {
		                <th>Email</th>
	                }

	                @if (group.Any(contact => contact.Birthday != "N/A"))
	                {
		                <th>Birthday</th>
	                }

	                @if (group.Any(contact => contact.PhoneNumber != "N/A"))
	                {
		                <th>Phone Number</th>
	                }

	                <th>Label/Group</th>


                </tr>
                </thead>
                <tbody>
                    @foreach (var contact in sortedGroup)
                    {
	                    <tr>
                            
		                    @{ 
			                    DateTime parsedDate;
                                string[] formats = { "MM/dd/yyyy", "dd/MM/yyyy", "yyyy-MM-dd", "M/d/yyyy" }; // Supported formats
			                    string formattedBirthday = "";

			                    if (!string.IsNullOrEmpty(contact.Birthday) && 
			                        DateTime.TryParseExact(contact.Birthday, formats, null, System.Globalization.DateTimeStyles.None, out parsedDate))
			                    {
				                    formattedBirthday = parsedDate.ToString("MMMM dd, yyyy");
			                    }
			                    else
			                    {
				                    formattedBirthday = "N/A";
			                    }
		                    }

		                    @if (group.Any(contact => !string.IsNullOrEmpty(contact.FirstName) || !string.IsNullOrEmpty(contact.LastName)))
		                    {
			                    <td>@contact.FullName</td>
		                    }
                            
		                    @if (group.Any(contact => contact.Email != "N/A"))
		                    {
			                    <td>@contact.Email</td>
		                    }

							@if (group.Any(contact => contact.Birthday != "N/A"))
		                    {
			                    <td>@formattedBirthday</td>
		                    }

		                    @if (group.Any(contact => contact.PhoneNumber != "N/A"))
		                    {
			                    <td>@contact.PhoneNumber</td>
		                    }

		                    <td>
			                    @if (contact.Labels != null && contact.Labels.Count > 0)
			                    {
				                    foreach (var label in contact.Labels)
				                    {
					                    if (label != "myContacts") // print all other label but the myContacts label ( visually more pleasing )
					                    {
						                    <span class="badge badge-info">@label.ToUpperInvariant()</span>
					                    }
				                    }
			                    }
			                    else
			                    {
				                    <span>-None-</span>
			                    }
		                    </td>
	                    </tr>
                    }
                </tbody>
            </table>
        }

        <!-- Go to Top Buttons -->
        <a href="#">
            <button id="goToTop-button1">
                &#8593 Go to Top &#8593
            </button>
        </a>
        <a href="#">
            <button id="goToTop-button2">
                &#8593 Go to Top &#8593
            </button>
        </a>
    </div>
}


