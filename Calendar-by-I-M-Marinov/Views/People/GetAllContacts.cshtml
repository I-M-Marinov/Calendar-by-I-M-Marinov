@model List<IGrouping<char, Calendar_by_I_M_Marinov.Models.People.ContactViewModel>>

@{
    ViewData["Title"] = "Contacts List";
}

<h2>Contacts List</h2>
<h4>Total contacts: @ViewBag.ContactsCount</h4>

@if (Model.Count == 0)
{
    <p>No contacts available.</p>
}
else
{
    <div>
	    <div class="alphabet-index-containers">
		    <!-- Latin Alphabetical Index as Cards -->
		    <div class="alphabet-index-container">
			    @foreach (var group in Model.Where(g => char.IsLetter(g.Key) && (g.Key < 'А' || g.Key > 'я')))
			    {
				    <a href="#letter-@group.Key">
					    <div class="alphabet-card">
							<span>@group.Key</span>
					    </div>
				    </a>
			    }
		    </div>

		    <!-- Cyrillic Alphabetical Index as Cards -->
		    <div class="alphabet-index-container">
			    @foreach (var group in Model.Where(g => char.IsLetter(g.Key) && (g.Key >= 'А' && g.Key <= 'я')))
			    {
				    <a href="#letter-@group.Key">
					    <div class="alphabet-card">
						    <span>@group.Key</span>
					    </div>
				    </a>
			    }
		    </div>
	    </div>

		
	    @if (TempData["ShowSuccessMessage"] != null)
	    {
			<div class="alert alert-success" id="success-message" role="alert">
			    <strong>@TempData["Message"]</strong></div>
	    }

	    @if (ViewBag.ContactGroups != null)
        {
	        <div class="contact-groups-container">
		        <h4>Contact Groups 
				        <div class="add-label-container" style="margin: 0.2em;">
					        <!-- Add Label Button -->
					        <button id="addLabelButton" class="btn btn-success">+</button>
					        <!-- Remove Label Button -->
					        <button id="removeLabelButton" class="btn btn-danger btn-sm">-</button>
					        <!-- Edit Label Button -->
							<button id="editLabelButton" class="btn btn-warning btn-sm">=</button>
				        </div>
			        </h4>

		        <form method="get" action="@Url.Action("GetContactsFromAGroup", "People")">
			        <div class="contact-groups">
				        @foreach (var contactGroup in ViewBag.ContactGroups)
				        {

					        if (contactGroup.Name != "chatBuddies" && contactGroup.Name != "all" && contactGroup.Name != "blocked")
					        {
						        <button type="submit" name="selectedGroup" value="@contactGroup.Name" class="btn btn-info group-button " id="group-button">
							        @contactGroup.FormattedName
						        </button>
					        }
				        }
			        </div>
		        </form>

		        <!-- Modal Pop-up for adding a new label -->
		        <div id="addLabelModal" class="modal">
			        <div class="modal-content">
				        <h4>Add a new group/label</h4>
				        <form id="addLabelForm" method="post" action="@Url.Action("CreateContactGroup", "People")">
							<input type="text" id="labelName" name="labelName" class="form-control" placeholder="Enter a group name" required />

					        <div class="modal-footer">
						        <button type="button" class="btn btn-danger" onclick="closePopup()">Cancel</button>
						        <button type="submit" class="btn btn-success">Add</button>
					        </div>

				        </form>
			        </div>
		        </div>
				
		        <!-- Modal Pop-up for removing a new label -->
		        <div id="removeLabelModal" class="modal">
			        <div class="modal-content">
				        <h4>Remove a group/label</h4>
				        <form id="removeLabelForm" method="post" action="@Url.Action("RemoveContactGroup", "People")">
					        <div class="form-group">
						        <select id="labelSelect" name="labelName" class="form-control" required>
							        <option value="" disabled selected>Select a label</option>
							        @foreach (var contactGroup in ViewBag.ContactGroups)
							        {
								        if (contactGroup.GroupType != "SYSTEM_CONTACT_GROUP")
								        {
									        <option value="@contactGroup.ResourceName">@contactGroup.FormattedName : @contactGroup.MemberCount contacts</option>
								        }
							        }
						        </select>
					        </div>

					        <div class="modal-footer">
								<button type="button" class="btn btn-danger" onclick="closePopup()">Cancel</button>
								<button type="submit" class="btn btn-primary">Remove</button>
					        </div>
				        </form>
			        </div>
		        </div>
				
		        <!-- Modal Pop-up for editing a label name -->
		        <div id="editLabelModal" class="modal">
			        <div class="modal-content">
				        <h4>Edit a group/label</h4>
				        <form id="removeLabelForm" method="post" action="@Url.Action("EditContactGroup", "People")">
					        <div class="form-group">
						        <select id="labelSelect" name="groupResourceName" class="form-control" required>
							        <option value="" disabled selected>Select a label</option>
							        @foreach (var contactGroup in ViewBag.ContactGroups)
							        {
								        if (contactGroup.GroupType != "SYSTEM_CONTACT_GROUP")
								        {
									        <option value="@contactGroup.ResourceName">@contactGroup.FormattedName : @contactGroup.MemberCount contacts</option>
								        }
							        }
						        </select>
								
								<input type="text" id="newGroupName" name="newGroupName" class="form-control" placeholder="Enter a new group name" required />

					        </div>
					        <div class="modal-footer">
								<button type="button" class="btn btn-danger" onclick="closePopup()">Cancel</button>
						        <button type="submit" class="btn btn-success">Update</button>
					        </div>
				        </form>
			        </div>
		        </div>


	        </div>
        }
        else
        {
	        <p>No contact groups available.</p>
        }


        <!-- Grouped Contacts by First Letter -->
        @foreach (var group in Model)
        {
	        var sortedGroup = group.OrderBy(contact => contact.FirstName).ToList();

	        <h3 class="letter-group-header" id="letter-@group.Key">@group.Key</h3>
	        <div id="number-of-contacts">@group.Count() contacts</div>
            <table class="table table-striped">
                <thead>
                <tr>

	                @if (group.Any(contact => !string.IsNullOrEmpty(contact.FirstName) || !string.IsNullOrEmpty(contact.LastName)))
	                {
		                <th>Full Name</th>
	                }

	                @if (group.Any(contact => contact.Email != "N/A"))
	                {
		                <th>Email</th>
	                }

	                @if (group.Any(contact => contact.Birthday != "N/A"))
	                {
		                <th>Birthday</th>
	                }

	                @if (group.Any(contact => contact.PhoneNumber != "N/A"))
	                {
		                <th>Phone Number</th>
	                }

	                <th>Label/Group</th>

	                <th>Actions</th> 


                </tr>
                </thead>
                <tbody>
                    @foreach (var contact in sortedGroup)
                    {
	                    <tr>
                            
		                    @{ 
			                    DateTime parsedDate;
                                string[] formats = { "MM/dd/yyyy", "dd/MM/yyyy", "yyyy-MM-dd", "M/d/yyyy" }; // Supported formats
			                    string formattedBirthday = "";

			                    if (!string.IsNullOrEmpty(contact.Birthday) && 
			                        DateTime.TryParseExact(contact.Birthday, formats, null, System.Globalization.DateTimeStyles.None, out parsedDate))
			                    {
				                    formattedBirthday = parsedDate.ToString("MMMM dd, yyyy");
			                    }
			                    else
			                    {
				                    formattedBirthday = "N/A";
			                    }
		                    }

		                    @if (group.Any(contact => !string.IsNullOrEmpty(contact.FirstName) || !string.IsNullOrEmpty(contact.LastName)))
		                    {
			                    <td>@contact.FullName</td>
		                    }
                            
		                    @if (group.Any(contact => contact.Email != "N/A"))
		                    {
			                    <td>@contact.Email</td>
		                    }

							@if (group.Any(contact => contact.Birthday != "N/A"))
		                    {
			                    <td>@formattedBirthday</td>
		                    }

		                    @if (group.Any(contact => contact.PhoneNumber != "N/A"))
		                    {
				                <td>@contact.PhoneNumber</td>
		                    }
		                    <td>
			                    @if (contact.Labels != null && contact.Labels.Count > 0)
			                    {
				                    foreach (var label in contact.Labels)
				                    {
					                    if (label != "myContacts") // print all other label but the myContacts label ( visually more pleasing )
					                    {
						                    <span class="badge badge-info">@label.ToUpperInvariant()</span>
					                    }
				                    }
			                    }
			                    else
			                    {
				                    <span>-None-</span>
			                    }
		                    </td>
		                    <td class="action-buttons">
			                    <!-- Update button linking to the UpdateContact action -->
			                    <form asp-controller="People" asp-action="UpdateContact" method="get">
				                    <input type="hidden" name="resourceName" value="@contact.ResourceName" />
									<button type="submit" class="btn btn-primary action-button" id="edit-btn">Edit</button>
			                    </form>
			                    <!-- Delete button linking to the DeleteContact action -->
			                    <form asp-controller="People" asp-action="DeleteContact" method="post">
				                    <input type="hidden" name="resourceName" value="@contact.ResourceName" />
				                    <input type="hidden" id="returnUrl" name="returnUrl" />
									<button type="submit" class="btn btn-danger action-button" id="delete-btn" onclick="setReturnUrl()">Delete</button>
			                    </form>
		                    </td>
	                    </tr>
                    }
                </tbody>
            </table>
        }

        <!-- Go to Top Buttons -->
        <a href="#">
            <button id="goToTop-button1">
                &#8593 Go to Top &#8593
            </button>
        </a>
        <a href="#">
            <button id="goToTop-button2">
                &#8593 Go to Top &#8593
            </button>
        </a>
    </div>
}


