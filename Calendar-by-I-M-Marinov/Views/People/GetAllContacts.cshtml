@model List<IGrouping<char, Calendar_by_I_M_Marinov.Models.People.ContactViewModel>>

@{
	ViewData["Title"] = "Contacts List";
}

<h2>Contacts List</h2>
<h4>Total contacts: @ViewBag.ContactsCount</h4>

@if (Model.Count == 0)
{
	<p>No contacts available.</p>
}
else
{
	<div>
		<!-- Latin Alphabetical Index as Cards -->
		<div class="alphabet-index-container">
			@foreach (var group in Model.Where(g => char.IsLetter(g.Key) && (g.Key < 'А' || g.Key > 'я')))
			{
				<a href="#letter-@group.Key">
					<div class="alphabet-card">
						<p>@group.Key</p>
					</div>
				</a>
			}
		</div>

		<!-- Cyrillic Alphabetical Index as Cards -->
		<div class="alphabet-index-container">
			@foreach (var group in Model.Where(g => char.IsLetter(g.Key) && (g.Key >= 'А' && g.Key <= 'я')))
			{
				<a href="#letter-@group.Key">
					<div class="alphabet-card">
						<p>@group.Key</p>
					</div>
				</a>
			}
		</div>

		<!-- Grouped Contacts by First Letter -->
		@foreach (var group in Model)
		{
			<h3 id="letter-@group.Key">@group.Key</h3>
			<table class="table table-striped">
				<thead>
				<tr>
					<th>Name</th>
					<th>Email</th>
					<th>Birthday</th>
					<th>Phone Number</th>
				</tr>
				</thead>
				<tbody>
				@foreach (var contact in group)
				{
					<tr>
						<td>@contact.Name</td>
						<td>@contact.Email</td>
						<td>@contact.Birthday</td>
						<td>@contact.PhoneNumber</td>
					</tr>
				}
				</tbody>
			</table>
		}
	</div>
}