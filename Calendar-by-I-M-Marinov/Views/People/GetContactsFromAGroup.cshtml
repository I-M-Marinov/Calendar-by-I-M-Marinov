@using System.Globalization
@model List<IGrouping<char, Calendar_by_I_M_Marinov.Models.People.ContactViewModel>>

@{
    ViewData["Title"] = "Contacts List";
}

<h2>Contacts List</h2>
<h4>There are <strong>@ViewBag.ContactsCount</strong> contacts in group "@ViewBag.ContactGroupSelected"</h4>


@if (Model.Count == 0)
{
    <p>No contacts available.</p>
}
else
{
	<div>
		<div class="alphabet-index-containers">
			<!-- Latin Alphabetical Index as Cards -->
			<div class="alphabet-index-container">
				@foreach (var group in Model.Where(g => char.IsLetter(g.Key) && (g.Key < 'А' || g.Key > 'я')))
				{
					<a href="#letter-@group.Key">
						<div class="alphabet-card">
							<span>@group.Key</span>
						</div>
					</a>
				}
			</div>

			<!-- Cyrillic Alphabetical Index as Cards -->
			<div class="alphabet-index-container">
				@foreach (var group in Model.Where(g => char.IsLetter(g.Key) && (g.Key >= 'А' && g.Key <= 'я')))
				{
					<a href="#letter-@group.Key">
						<div class="alphabet-card">
							<span>@group.Key</span>
						</div>
					</a>
				}
			</div>
		</div>

		@if (ViewBag.ContactGroups != null)
		{
			<div class="contact-groups-container">
				<h4>Contact Groups</h4>
				<form method="get" action="@Url.Action("GetContactsFromAGroup", "People")">
					<div class="contact-groups">
						@foreach (var contactGroup in ViewBag.ContactGroups)
						{
							if (contactGroup.Name != "chatBuddies" && contactGroup.Name != "all" && contactGroup.Name != "blocked")
							{
								<button type="submit"
								        name="selectedGroup"
								        value="@contactGroup.Name"
								        class="btn group-button @(ViewBag.ContactGroupSelected == contactGroup.Name ? "btn-selected-group" : "btn-info")"
								        id="group-button">
									@contactGroup.FormattedName
								</button>
							}
						}
					</div>
				</form>
				<!-- Add Label Button -->
				<div class="add-label-container" style="margin: 0.2em;">
					<button id="addLabelButton" class="btn btn-success">+Group</button>
				</div>
				
				
				<!-- Modal Pop-up for adding a new label -->
				<div id="addLabelModal" class="modal">
					<div class="modal-content">
						<h4>Add a new group/label</h4>
						<form id="addLabelForm" method="post" action="@Url.Action("CreateContactGroup", "People")">
							<input type="text" id="labelName" name="labelName" class="form-control" required />

							<div class="modal-footer">
								<button type="button" class="btn btn-warning" onclick="closePopup()">Cancel</button>
								<button type="submit" class="btn btn-primary">Create</button>
							</div>

						</form>
					</div>
				</div>
			</div>
		}
		else
		{
			<p>No contact groups available.</p>
		}

		<!-- Grouped Contacts by First Letter -->
		@foreach (var group in Model)
		{
			var sortedGroup = group.OrderBy(contact => contact.FirstName).ToList();

			<h3 class="letter-group-header" id="letter-@group.Key">@group.Key</h3>
			<table class="table table-striped">
				<thead>
					<tr>
						@if (group.Any(contact => !string.IsNullOrEmpty(contact.FirstName) || !string.IsNullOrEmpty(contact.LastName)))
						{
							<th>Full Name</th>
						}

						@if (group.Any(contact => contact.Email != "N/A"))
						{
							<th>Email</th>
						}

						@if (group.Any(contact => contact.Birthday != "N/A"))
						{
							<th>Birthday</th>
						}

						@if (group.Any(contact => contact.PhoneNumber != "N/A"))
						{
							<th>Phone Number</th>
						}
						<th>Actions</th> <!-- Add an Update header -->
					</tr>
				</thead>
				<tbody>
					@foreach (var contact in sortedGroup)
				{
					<tr>

						@{
							DateTime parsedDate;
								string[] formats = { "MM/dd/yyyy", "dd/MM/yyyy", "yyyy-MM-dd", "M/d/yyyy" };
							string formattedBirthday = "";

							if (!string.IsNullOrEmpty(contact.Birthday) &&
							    DateTime.TryParseExact(contact.Birthday, formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out parsedDate))
							{
								formattedBirthday = parsedDate.ToString("MMMM dd, yyyy");
							}
							else
							{
								formattedBirthday = "N/A";
							}
						}


						
						@if (group.Any(contact => !string.IsNullOrEmpty(contact.FirstName) || !string.IsNullOrEmpty(contact.LastName)))
						{
							<td>@contact.FullName</td>
						}
                            
						@if (group.Any(contact => contact.Email != "N/A"))
						{
							<td>@contact.Email</td>
						}

						@if (group.Any(contact => contact.Birthday != "N/A"))
						{
							<td>@formattedBirthday</td>
						}

						@if (group.Any(contact => contact.PhoneNumber != "N/A"))
						{
							<td>@contact.PhoneNumber</td>
						}
						
						<td>
							<!-- Update button linking to the UpdateContact action -->
							<form asp-controller="People" asp-action="UpdateContact" method="get">
								<input type="hidden" name="resourceName" value="@contact.ResourceName" />
								<button type="submit" class="btn btn-primary">Update</button>
							</form>
						</td>

					</tr>
				}
				</tbody>
			</table>
		}

		<!-- Go to Top Buttons -->
		<a href="#">
			<button id="goToTop-button1">
				&#8593 Go to Top &#8593
			</button>
		</a>
		<a href="#">
			<button id="goToTop-button2">
				&#8593 Go to Top &#8593
			</button>
		</a>
	</div>
}
